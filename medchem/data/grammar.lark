?start: bool_expr
?bool_expr: bool_term (OR_OP bool_term)*
?bool_term: bool_factor (AND_OP bool_factor)*
?bool_factor: not_bool_factor
              | "(" bool_expr ")"
              | relation_expr
?relation_expr: hasalert 
    | hasprop 
    | hassuperstructure 
    | hassubstructure
    | like

not_bool_factor: NOT_OP bool_factor
hasalert: "HASALERT" "(" ESCAPED_STRING ")"
hasprop: "HASPROP" "(" ESCAPED_STRING comparator SIGNED_NUMBER ")"
hassuperstructure: "HASSUPERSTRUCTURE" "(" ESCAPED_STRING ")"
hassubstructure: "HASSUBSTRUCTURE" "(" ESCAPED_STRING ["," operator] ["," INT] ["," is_smarts] ")"
like: "LIKE" "(" ESCAPED_STRING comparator SIGNED_NUMBER ")"

comparator: EQ | NE | LT | LE | GT | GE
operator: MIN | MAX
is_smarts: TRUE | FALSE

// TERMINALS

EQ: "="
NE: "!="
LT: "<" 
LE: "<="
GT: ">" 
GE: ">=" 
AND_OP: "AND" | "&"
OR_OP: "OR" | "|"
NOT_OP: "NOT" | "!"
TRUE: "true"i
FALSE: "false"i
NULL: "null"i
MIN: "min"
MAX: "max"
UNSPECIFIED: "na"i | "n/a"i

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.INT
%import common.WS
%ignore WS